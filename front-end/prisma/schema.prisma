generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id                    String               @id
  username              String               @unique
  displayName           String
  email                 String?              @unique
  passwordHash          String?
  googleId              String?              @unique
  avatarUrl             String?
  bio                   String?
  createdAt             DateTime             @default(now())
  walletAddress         String?              @unique
  walletLink            String?
  walletName            String?
  walletPublicKey       String?
  emailVerified         Boolean              @default(false)
  emailVerifyExpires    DateTime?
  emailVerifyToken      String?
  communityId           String?
  userRewards           UserReward[]
  assets                Asset[]
  bookmarks             Bookmark[]
  comments              Comment[]
  createdCommunities    Community[]          @relation("CreatedCommunities")
  Community             Community[]
  CommunityMember       CommunityMember[]
  CommunityModerator    CommunityModerator[]
  coursesCreated        Course[]
  Enrollment            Enrollment[]
  following             Follow[]             @relation("Following")
  followers             Follow[]             @relation("Followers")
  likes                 Like[]
  issuedNotifications   Notification[]       @relation("Issuer")
  receivedNotifications Notification[]       @relation("Recipient")
  posts                 Post[]
  Review                Review[]
  sessions              Session[]
  assignedRoles         CommunityRole[]      @relation("AssignedRole")
  joinedCommunities     Community[]          @relation("CommunityMembers")
  moderatedCommunities  Community[]          @relation("CommunityModerators")
  communityRoles        CommunityRole[]      @relation("UserRoles")

  @@map("users")
}

model Asset {
  id               String    @id @default(cuid())
  userId           String
  type             AssetType
  url              String
  name             String
  createdAt        DateTime  @default(now())
  txnHash          String?
  tokenId          String?
  chain            String?
  collection       String?
  metadata         Json?
  metadataUrl      String?
  description      String?
  aptosExplorerUrl String?
  courseId         String?
  course           Course?   @relation(fields: [courseId], references: [id])
  user             User      @relation(fields: [userId], references: [id], onDelete: NoAction)

  @@map("assets")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction)

  @@map("sessions")
}

model Follow {
  followerId  String
  followingId String
  follower    User   @relation("Following", fields: [followerId], references: [id], onDelete: NoAction)
  following   User   @relation("Followers", fields: [followingId], references: [id], onDelete: NoAction)

  @@unique([followerId, followingId])
  @@map("follows")
}

model Post {
  id                  String          @id @default(cuid())
  content             String
  userId              String
  createdAt           DateTime        @default(now())
  badgeId             String?
  communityBadgeId    String?
  communityName       String?
  bookmarks           Bookmark[]
  comments            Comment[]
  likes               Like[]
  linkedNotifications Notification[]
  attachments         Media[]
  badge               CommunityBadge? @relation("PostBadge", fields: [badgeId], references: [id])
  CommunityBadge      CommunityBadge? @relation("PostCommunityBadge", fields: [communityBadgeId], references: [id])
  community           Community?      @relation(fields: [communityName], references: [name])
  user                User            @relation(fields: [userId], references: [id], onDelete: NoAction)

  @@map("posts")
}

model Media {
  id        String    @id @default(cuid())
  postId    String?
  type      MediaType
  url       String
  createdAt DateTime  @default(now())
  post      Post?     @relation(fields: [postId], references: [id])

  @@map("post_media")
}

model Comment {
  id            String     @id @default(cuid())
  content       String
  userId        String
  postId        String
  createdAt     DateTime   @default(now())
  communityName String?
  community     Community? @relation(fields: [communityName], references: [name])
  post          Post       @relation(fields: [postId], references: [id], onDelete: NoAction)
  user          User       @relation(fields: [userId], references: [id], onDelete: NoAction)

  @@map("comments")
}

model Like {
  userId        String
  postId        String
  communityName String?
  community     Community? @relation(fields: [communityName], references: [name])
  post          Post       @relation(fields: [postId], references: [id], onDelete: NoAction)
  user          User       @relation(fields: [userId], references: [id], onDelete: NoAction)

  @@unique([userId, postId])
  @@map("likes")
}

model Bookmark {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: NoAction)
  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction)

  @@unique([userId, postId])
  @@map("bookmarks")
}

model Notification {
  id          String           @id @default(cuid())
  recipientId String
  issuerId    String
  postId      String?
  type        NotificationType
  read        Boolean          @default(false)
  createdAt   DateTime         @default(now())
  issuer      User             @relation("Issuer", fields: [issuerId], references: [id], onDelete: NoAction)
  post        Post?            @relation(fields: [postId], references: [id], onDelete: NoAction)
  recipient   User             @relation("Recipient", fields: [recipientId], references: [id], onDelete: NoAction)

  @@map("notifications")
}

model Course {
  id              String       @id @default(cuid())
  title           String
  description     String
  price           Int
  imageUrl        String
  instructorId    String
  category        String
  level           String
  duration        Int
  enrollmentCount Int          @default(0)
  rating          Float?
  isPublished     Boolean      @default(false)
  startDate       DateTime?
  endDate         DateTime?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  assets          Asset[]
  instructor      User         @relation(fields: [instructorId], references: [id])
  enrollments     Enrollment[]
  lessons         Lesson[]
  reviews         Review[]

  @@map("courses")
}

model Lesson {
  id        String   @id @default(cuid())
  title     String
  content   String
  order     Int
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id], onDelete: NoAction)

  @@map("lessons")
}

model Enrollment {
  id        String           @id @default(cuid())
  userId    String
  courseId  String
  progress  Int              @default(0)
  status    EnrollmentStatus @default(ACTIVE)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  course    Course           @relation(fields: [courseId], references: [id], onDelete: NoAction)
  user      User             @relation(fields: [userId], references: [id], onDelete: NoAction)

  @@unique([userId, courseId])
  @@map("enrollments")
}

model Review {
  id        String   @id @default(cuid())
  content   String
  rating    Int
  userId    String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id], onDelete: NoAction)
  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction)

  @@unique([userId, courseId])
  @@map("reviews")
}

model CommunityRole {
  id            String    @id @default(cuid())
  name          String
  color         String
  communityName String
  community     Community @relation(fields: [communityName], references: [name], onDelete: NoAction)
  assignedTo    User[]    @relation("AssignedRole")
  users         User[]    @relation("UserRoles")

  @@unique([name, communityName])
  @@map("community_roles")
}

model CommunityBadge {
  id            String    @id @default(cuid())
  name          String
  color         String
  communityName String
  community     Community @relation(fields: [communityName], references: [name], onDelete: NoAction)
  badgePosts    Post[]    @relation("PostBadge")
  posts         Post[]    @relation("PostCommunityBadge")

  @@unique([name, communityName])
  @@map("community_badges")
}

model Community {
  id                 String               @id @default(cuid())
  name               String               @unique
  description        String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  creatorId          String
  isPrivate          Boolean              @default(false)
  communityName      String?              @default(dbgenerated("name"))
  userId             String?
  Comment            Comment[]
  creator            User                 @relation("CreatedCommunities", fields: [creatorId], references: [id])
  User               User?                @relation(fields: [userId], references: [id])
  badges             CommunityBadge[]
  CommunityMember    CommunityMember[]
  CommunityModerator CommunityModerator[]
  roles              CommunityRole[]
  Like               Like[]
  posts              Post[]
  members            User[]               @relation("CommunityMembers")
  moderators         User[]               @relation("CommunityModerators")

  @@map("communities")
}

model CommunityMember {
  id            String    @id @default(cuid())
  userId        String
  communityName String
  communityId   String
  Community     Community @relation(fields: [communityId], references: [id])
  user          User      @relation(fields: [userId], references: [id])

  @@unique([userId, communityName])
  @@map("community_members")
}

model CommunityModerator {
  id            String    @id @default(cuid())
  userId        String
  communityName String
  communityId   String
  Community     Community @relation(fields: [communityId], references: [id])
  user          User      @relation(fields: [userId], references: [id])

  @@unique([userId, communityName])
  @@map("community_moderators")
}

model Reward {
  id              String                @id @default(cuid())
  name            String
  description     String
  requirement     Int
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  requirementType RewardRequirementType
  userRewards     UserReward[]
}

model UserReward {
  id        String   @id @default(cuid())
  userId    String
  rewardId  String
  progress  Int      @default(0)
  claimed   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  reward    Reward   @relation(fields: [rewardId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, rewardId])
  @@index([userId, rewardId])
}

enum AssetType {
  NFT
  PHOTO
  VIDEO
  AUDIO
  DOCUMENT
  OTHER
}

enum MediaType {
  IMAGE
  VIDEO
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  DROPPED
}

enum NotificationType {
  LIKE
  FOLLOW
  COMMENT
}

enum RewardRequirementType {
  POSTS
  COMMENTS
  LIKES
  FOLLOWS
  ENROLLMENTS
  REVIEWS
  COMMUNITY_JOINS
  COMMUNITY_POSTS
  COMMUNITY_COMMENTS
  COMMUNITY_LIKES
}
